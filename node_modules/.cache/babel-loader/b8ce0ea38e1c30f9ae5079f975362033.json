{"ast":null,"code":"import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nconst LEFT_PAGE = 'LEFT';\nconst RIGHT_PAGE = 'RIGHT';\n/**\r\n * Helper method for creating a range of numbers\r\n * range(1, 5) => [1, 2, 3, 4, 5]\r\n */\n\nconst range = (from, to, step = 1) => {\n  let i = from;\n  const range = [];\n\n  while (i <= to) {\n    range.push(i);\n    i += step;\n  }\n\n  return range;\n};\n\nclass Pagination extends Component {\n  constructor(props) {\n    super(props);\n    const {\n      totalRecords = null,\n      pageLimit = 30,\n      pageNeighbours = 0\n    } = props;\n    this.pageLimit = typeof pageLimit === 'number' ? pageLimit : 30;\n    this.totalRecords = typeof totalRecords === 'number' ? totalRecords : 0; // pageNeighbours can be: 0, 1 or 2\n\n    this.pageNeighbours = typeof pageNeighbours === 'number' ? Math.max(0, Math.min(pageNeighbours, 2)) : 0;\n    this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\n    this.state = {\n      currentPage: 1\n    };\n  }\n\n}\n\nfetchPageNumbers = () => {\n  const totalPages = this.totalPages;\n  const currentPage = this.state.currentPage;\n  const pageNeighbours = this.pageNeighbours;\n  /**\r\n   * totalNumbers: the total page numbers to show on the control\r\n   * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\r\n   */\n\n  const totalNumbers = this.pageNeighbours * 2 + 3;\n  const totalBlocks = totalNumbers + 2;\n\n  if (totalPages > totalBlocks) {\n    const startPage = Math.max(2, currentPage - pageNeighbours);\n    const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\n    let pages = range(startPage, endPage);\n    /**\r\n     * hasLeftSpill: has hidden pages to the left\r\n     * hasRightSpill: has hidden pages to the right\r\n     * spillOffset: number of hidden pages either to the left or to the right\r\n     */\n\n    const hasLeftSpill = startPage > 2;\n    const hasRightSpill = totalPages - endPage > 1;\n    const spillOffset = totalNumbers - (pages.length + 1);\n\n    switch (true) {\n      // handle: (1) < {5 6} [7] {8 9} (10)\n      case hasLeftSpill && !hasRightSpill:\n        {\n          const extraPages = range(startPage - spillOffset, startPage - 1);\n          pages = [LEFT_PAGE, ...extraPages, ...pages];\n          break;\n        }\n      // handle: (1) {2 3} [4] {5 6} > (10)\n\n      case !hasLeftSpill && hasRightSpill:\n        {\n          const extraPages = range(endPage + 1, endPage + spillOffset);\n          pages = [...pages, ...extraPages, RIGHT_PAGE];\n          break;\n        }\n      // handle: (1) < {4 5} [6] {7 8} > (10)\n\n      case hasLeftSpill && hasRightSpill:\n      default:\n        {\n          pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\n          break;\n        }\n    }\n\n    return [1, ...pages, totalPages];\n  }\n\n  return range(1, totalPages);\n};\n\nPagination.propTypes = {\n  totalRecords: PropTypes.number.isRequired,\n  pageLimit: PropTypes.number,\n  pageNeighbours: PropTypes.number,\n  onPageChanged: PropTypes.func\n};\nexport default Pagination;","map":{"version":3,"sources":["D:/React-SearchApp/search-app/src/components/pagination/Pagination.js"],"names":["React","Component","Fragment","PropTypes","LEFT_PAGE","RIGHT_PAGE","range","from","to","step","i","push","Pagination","constructor","props","totalRecords","pageLimit","pageNeighbours","Math","max","min","totalPages","ceil","state","currentPage","fetchPageNumbers","totalNumbers","totalBlocks","startPage","endPage","pages","hasLeftSpill","hasRightSpill","spillOffset","length","extraPages","propTypes","number","isRequired","onPageChanged","func"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst LEFT_PAGE = 'LEFT';\r\nconst RIGHT_PAGE = 'RIGHT';\r\n\r\n/**\r\n * Helper method for creating a range of numbers\r\n * range(1, 5) => [1, 2, 3, 4, 5]\r\n */\r\nconst range = (from, to, step = 1) => {\r\n  let i = from;\r\n  const range = [];\r\n\r\n  while (i <= to) {\r\n    range.push(i);\r\n    i += step;\r\n  }\r\n\r\n  return range;\r\n}\r\n\r\n\r\nclass Pagination extends Component {\r\n\r\n\r\n\r\n    \r\n  constructor(props) {\r\n    super(props);\r\n    const { totalRecords = null, pageLimit = 30, pageNeighbours = 0 } = props;\r\n\r\n    this.pageLimit = typeof pageLimit === 'number' ? pageLimit : 30;\r\n    this.totalRecords = typeof totalRecords === 'number' ? totalRecords : 0;\r\n\r\n    // pageNeighbours can be: 0, 1 or 2\r\n    this.pageNeighbours = typeof pageNeighbours === 'number'\r\n      ? Math.max(0, Math.min(pageNeighbours, 2))\r\n      : 0;\r\n\r\n    this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\r\n\r\n    this.state = { currentPage: 1 };\r\n  }\r\n\r\n}\r\n\r\nfetchPageNumbers = () => {\r\n\r\n    const totalPages = this.totalPages;\r\n    const currentPage = this.state.currentPage;\r\n    const pageNeighbours = this.pageNeighbours;\r\n\r\n    /**\r\n     * totalNumbers: the total page numbers to show on the control\r\n     * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\r\n     */\r\n    const totalNumbers = (this.pageNeighbours * 2) + 3;\r\n    const totalBlocks = totalNumbers + 2;\r\n\r\n    if (totalPages > totalBlocks) {\r\n\r\n      const startPage = Math.max(2, currentPage - pageNeighbours);\r\n      const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\r\n\r\n      let pages = range(startPage, endPage);\r\n\r\n      /**\r\n       * hasLeftSpill: has hidden pages to the left\r\n       * hasRightSpill: has hidden pages to the right\r\n       * spillOffset: number of hidden pages either to the left or to the right\r\n       */\r\n      const hasLeftSpill = startPage > 2;\r\n      const hasRightSpill = (totalPages - endPage) > 1;\r\n      const spillOffset = totalNumbers - (pages.length + 1);\r\n\r\n      switch (true) {\r\n        // handle: (1) < {5 6} [7] {8 9} (10)\r\n        case (hasLeftSpill && !hasRightSpill): {\r\n          const extraPages = range(startPage - spillOffset, startPage - 1);\r\n          pages = [LEFT_PAGE, ...extraPages, ...pages];\r\n          break;\r\n        }\r\n\r\n        // handle: (1) {2 3} [4] {5 6} > (10)\r\n        case (!hasLeftSpill && hasRightSpill): {\r\n          const extraPages = range(endPage + 1, endPage + spillOffset);\r\n          pages = [...pages, ...extraPages, RIGHT_PAGE];\r\n          break;\r\n        }\r\n\r\n        // handle: (1) < {4 5} [6] {7 8} > (10)\r\n        case (hasLeftSpill && hasRightSpill):\r\n        default: {\r\n          pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\r\n          break;\r\n        }\r\n      }\r\n\r\n      return [1, ...pages, totalPages];\r\n\r\n    }\r\n\r\n    return range(1, totalPages);\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nPagination.propTypes = {\r\n  totalRecords: PropTypes.number.isRequired,\r\n  pageLimit: PropTypes.number,\r\n  pageNeighbours: PropTypes.number,\r\n  onPageChanged: PropTypes.func\r\n};\r\n\r\nexport default Pagination;"]},"metadata":{},"sourceType":"module"}