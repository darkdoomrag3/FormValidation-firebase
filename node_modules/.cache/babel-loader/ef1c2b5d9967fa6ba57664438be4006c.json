{"ast":null,"code":"var _jsxFileName = \"D:\\\\React-SearchApp\\\\search-app\\\\src\\\\components\\\\pagination\\\\Pagination.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nconst LEFT_PAGE = 'LEFT';\nconst RIGHT_PAGE = 'RIGHT';\n/**\r\n * Helper method for creating a range of numbers\r\n * range(1, 5) => [1, 2, 3, 4, 5]\r\n */\n\nconst range = (from, to, step = 1) => {\n  let i = from;\n  const range = [];\n\n  while (i <= to) {\n    range.push(i);\n    i += step;\n  }\n\n  return range;\n};\n\nclass Pagination extends Component {\n  constructor(props) {\n    super(props);\n\n    this.gotoPage = page => {\n      const {\n        onPageChanged = f => f\n      } = this.props;\n      const currentPage = Math.max(0, Math.min(page, this.totalPages));\n      const paginationData = {\n        currentPage,\n        totalPages: this.totalPages,\n        pageLimit: this.pageLimit,\n        totalRecords: this.totalRecords\n      };\n      this.setState({\n        currentPage\n      }, () => onPageChanged(paginationData));\n    };\n\n    this.handleClick = page => evt => {\n      evt.preventDefault();\n      this.gotoPage(page);\n    };\n\n    this.handleMoveLeft = evt => {\n      evt.preventDefault();\n      this.gotoPage(this.state.currentPage - this.pageNeighbours * 2 - 1);\n    };\n\n    this.handleMoveRight = evt => {\n      evt.preventDefault();\n      this.gotoPage(this.state.currentPage + this.pageNeighbours * 2 + 1);\n    };\n\n    this.fetchPageNumbers = () => {\n      const totalPages = this.totalPages;\n      const currentPage = this.state.currentPage;\n      const pageNeighbours = this.pageNeighbours;\n      /**\r\n       * totalNumbers: the total page numbers to show on the control\r\n       * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\r\n       */\n\n      const totalNumbers = this.pageNeighbours * 2 + 3;\n      const totalBlocks = totalNumbers + 2;\n\n      if (totalPages > totalBlocks) {\n        const startPage = Math.max(2, currentPage - pageNeighbours);\n        const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\n        let pages = range(startPage, endPage);\n        /**\r\n         * hasLeftSpill: has hidden pages to the left\r\n         * hasRightSpill: has hidden pages to the right\r\n         * spillOffset: number of hidden pages either to the left or to the right\r\n         */\n\n        const hasLeftSpill = startPage > 2;\n        const hasRightSpill = totalPages - endPage > 1;\n        const spillOffset = totalNumbers - (pages.length + 1);\n\n        switch (true) {\n          // handle: (1) < {5 6} [7] {8 9} (10)\n          case hasLeftSpill && !hasRightSpill:\n            {\n              const extraPages = range(startPage - spillOffset, startPage - 1);\n              pages = [LEFT_PAGE, ...extraPages, ...pages];\n              break;\n            }\n          // handle: (1) {2 3} [4] {5 6} > (10)\n\n          case !hasLeftSpill && hasRightSpill:\n            {\n              const extraPages = range(endPage + 1, endPage + spillOffset);\n              pages = [...pages, ...extraPages, RIGHT_PAGE];\n              break;\n            }\n          // handle: (1) < {4 5} [6] {7 8} > (10)\n\n          case hasLeftSpill && hasRightSpill:\n          default:\n            {\n              pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\n              break;\n            }\n        }\n\n        return [1, ...pages, totalPages];\n      }\n\n      return range(1, totalPages);\n    };\n\n    const {\n      totalRecords = null,\n      pageLimit = 30,\n      pageNeighbours: _pageNeighbours = 0\n    } = props;\n    this.pageLimit = typeof pageLimit === 'number' ? pageLimit : 30;\n    this.totalRecords = typeof totalRecords === 'number' ? totalRecords : 0; // pageNeighbours can be: 0, 1 or 2\n\n    this.pageNeighbours = typeof _pageNeighbours === 'number' ? Math.max(0, Math.min(_pageNeighbours, 2)) : 0;\n    this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\n    this.state = {\n      currentPage: 1\n    };\n  }\n\n  componentDidMount() {\n    this.gotoPage(1);\n  }\n\n  render() {\n    if (!this.totalRecords || this.totalPages === 1) return null;\n    const {\n      currentPage\n    } = this.state;\n    const pages = this.fetchPageNumbers();\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      \"aria-label\": \"Countries Pagination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"pagination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, pages.map((page, index) => {\n      if (page === LEFT_PAGE) return React.createElement(\"li\", {\n        key: index,\n        className: \"page-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"page-link\",\n        href: \"#\",\n        \"aria-label\": \"Previous\",\n        onClick: this.handleMoveLeft,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"\\xAB\"), React.createElement(\"span\", {\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"Previous\")));\n      if (page === RIGHT_PAGE) return React.createElement(\"li\", {\n        key: index,\n        className: \"page-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"page-link\",\n        href: \"#\",\n        \"aria-label\": \"Next\",\n        onClick: this.handleMoveRight,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"\\xBB\"), React.createElement(\"span\", {\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"Next\")));\n      return React.createElement(\"li\", {\n        key: index,\n        className: `page-item${currentPage === page ? ' active' : ''}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"page-link\",\n        href: \"#\",\n        onClick: this.handleClick(page),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, page));\n    }))));\n  }\n\n}\n\nPagination.propTypes = {\n  totalRecords: PropTypes.number.isRequired,\n  pageLimit: PropTypes.number,\n  pageNeighbours: PropTypes.number,\n  onPageChanged: PropTypes.func\n};\nexport default Pagination;","map":{"version":3,"sources":["D:/React-SearchApp/search-app/src/components/pagination/Pagination.js"],"names":["React","Component","Fragment","PropTypes","LEFT_PAGE","RIGHT_PAGE","range","from","to","step","i","push","Pagination","constructor","props","gotoPage","page","onPageChanged","f","currentPage","Math","max","min","totalPages","paginationData","pageLimit","totalRecords","setState","handleClick","evt","preventDefault","handleMoveLeft","state","pageNeighbours","handleMoveRight","fetchPageNumbers","totalNumbers","totalBlocks","startPage","endPage","pages","hasLeftSpill","hasRightSpill","spillOffset","length","extraPages","ceil","componentDidMount","render","map","index","propTypes","number","isRequired","func"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst LEFT_PAGE = 'LEFT';\r\nconst RIGHT_PAGE = 'RIGHT';\r\n\r\n/**\r\n * Helper method for creating a range of numbers\r\n * range(1, 5) => [1, 2, 3, 4, 5]\r\n */\r\nconst range = (from, to, step = 1) => {\r\n  let i = from;\r\n  const range = [];\r\n\r\n  while (i <= to) {\r\n    range.push(i);\r\n    i += step;\r\n  }\r\n\r\n  return range;\r\n}\r\n\r\n\r\nclass Pagination extends Component {\r\n    \r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const { totalRecords = null, pageLimit = 30, pageNeighbours = 0 } = props;\r\n\r\n    this.pageLimit = typeof pageLimit === 'number' ? pageLimit : 30;\r\n    this.totalRecords = typeof totalRecords === 'number' ? totalRecords : 0;\r\n\r\n    // pageNeighbours can be: 0, 1 or 2\r\n    this.pageNeighbours = typeof pageNeighbours === 'number'\r\n      ? Math.max(0, Math.min(pageNeighbours, 2))\r\n      : 0;\r\n\r\n    this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\r\n\r\n    this.state = { currentPage: 1 };\r\n  }\r\n\r\n  \r\n  componentDidMount() {\r\n    this.gotoPage(1);\r\n  }\r\n\r\n  gotoPage = page => {\r\n    const { onPageChanged = f => f } = this.props;\r\n\r\n    const currentPage = Math.max(0, Math.min(page, this.totalPages));\r\n\r\n    const paginationData = {\r\n      currentPage,\r\n      totalPages: this.totalPages,\r\n      pageLimit: this.pageLimit,\r\n      totalRecords: this.totalRecords\r\n    };\r\n\r\n    this.setState({ currentPage }, () => onPageChanged(paginationData));\r\n  }\r\n\r\n  handleClick = page => evt => {\r\n    evt.preventDefault();\r\n    this.gotoPage(page);\r\n  }\r\n\r\n  handleMoveLeft = evt => {\r\n    evt.preventDefault();\r\n    this.gotoPage(this.state.currentPage - (this.pageNeighbours * 2) - 1);\r\n  }\r\n\r\n  handleMoveRight = evt => {\r\n    evt.preventDefault();\r\n    this.gotoPage(this.state.currentPage + (this.pageNeighbours * 2) + 1);\r\n  }\r\n\r\n\r\n  fetchPageNumbers = () => {\r\n\r\n    const totalPages = this.totalPages;\r\n    const currentPage = this.state.currentPage;\r\n    const pageNeighbours = this.pageNeighbours;\r\n\r\n    /**\r\n     * totalNumbers: the total page numbers to show on the control\r\n     * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\r\n     */\r\n    const totalNumbers = (this.pageNeighbours * 2) + 3;\r\n    const totalBlocks = totalNumbers + 2;\r\n\r\n    if (totalPages > totalBlocks) {\r\n\r\n      const startPage = Math.max(2, currentPage - pageNeighbours);\r\n      const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\r\n\r\n      let pages = range(startPage, endPage);\r\n\r\n      /**\r\n       * hasLeftSpill: has hidden pages to the left\r\n       * hasRightSpill: has hidden pages to the right\r\n       * spillOffset: number of hidden pages either to the left or to the right\r\n       */\r\n      const hasLeftSpill = startPage > 2;\r\n      const hasRightSpill = (totalPages - endPage) > 1;\r\n      const spillOffset = totalNumbers - (pages.length + 1);\r\n\r\n      switch (true) {\r\n        // handle: (1) < {5 6} [7] {8 9} (10)\r\n        case (hasLeftSpill && !hasRightSpill): {\r\n          const extraPages = range(startPage - spillOffset, startPage - 1);\r\n          pages = [LEFT_PAGE, ...extraPages, ...pages];\r\n          break;\r\n        }\r\n\r\n        // handle: (1) {2 3} [4] {5 6} > (10)\r\n        case (!hasLeftSpill && hasRightSpill): {\r\n          const extraPages = range(endPage + 1, endPage + spillOffset);\r\n          pages = [...pages, ...extraPages, RIGHT_PAGE];\r\n          break;\r\n        }\r\n\r\n        // handle: (1) < {4 5} [6] {7 8} > (10)\r\n        case (hasLeftSpill && hasRightSpill):\r\n        default: {\r\n          pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\r\n          break;\r\n        }\r\n      }\r\n\r\n      return [1, ...pages, totalPages];\r\n\r\n    }\r\n\r\n    return range(1, totalPages);\r\n    \r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    if (!this.totalRecords || this.totalPages === 1) return null;\r\n\r\n    const { currentPage } = this.state;\r\n    const pages = this.fetchPageNumbers();\r\n\r\n    return (\r\n      <Fragment>\r\n        <nav aria-label=\"Countries Pagination\">\r\n          <ul className=\"pagination\">\r\n            { pages.map((page, index) => {\r\n\r\n              if (page === LEFT_PAGE) return (\r\n                <li key={index} className=\"page-item\">\r\n                  <a className=\"page-link\" href=\"#\" aria-label=\"Previous\" onClick={this.handleMoveLeft}>\r\n                    <span aria-hidden=\"true\">&laquo;</span>\r\n                    <span className=\"sr-only\">Previous</span>\r\n                  </a>\r\n                </li>\r\n              );\r\n\r\n              if (page === RIGHT_PAGE) return (\r\n                <li key={index} className=\"page-item\">\r\n                  <a className=\"page-link\" href=\"#\" aria-label=\"Next\" onClick={this.handleMoveRight}>\r\n                    <span aria-hidden=\"true\">&raquo;</span>\r\n                    <span className=\"sr-only\">Next</span>\r\n                  </a>\r\n                </li>\r\n              );\r\n\r\n              return (\r\n                <li key={index} className={`page-item${ currentPage === page ? ' active' : ''}`}>\r\n                  <a className=\"page-link\" href=\"#\" onClick={ this.handleClick(page) }>{ page }</a>\r\n                </li>\r\n              );\r\n\r\n            }) }\r\n\r\n          </ul>\r\n        </nav>\r\n      </Fragment>\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\nPagination.propTypes = {\r\n  totalRecords: PropTypes.number.isRequired,\r\n  pageLimit: PropTypes.number,\r\n  pageNeighbours: PropTypes.number,\r\n  onPageChanged: PropTypes.func\r\n};\r\n\r\nexport default Pagination;"]},"metadata":{},"sourceType":"module"}