{"ast":null,"code":"var _jsxFileName = \"D:\\\\React-SearchApp\\\\search-app\\\\src\\\\components\\\\search\\\\search.js\";\nimport React from 'react'; //import './search.style.scss';\n\nimport PropTypes from 'prop-types';\nimport { Button, InputGroup, FormControl, OverlayTrigger, Tooltip } from 'react-bootstrap'; //import FaSearch from 'react-icons/fa/search';\n//import FaClose from 'react-icons/fa/close';\n\nexport default class Search extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClearClick = () => {\n      const {\n        onClear,\n        defaultValue\n      } = this.props;\n      this.setState({\n        searchKeyword: defaultValue\n      });\n      this.onSearch(defaultValue);\n      onClear();\n    };\n\n    this.onSearch = keyword => {\n      const {\n        onSearch,\n        allowEmptySearch,\n        minChars\n      } = this.props;\n\n      if (keyword.length === 0 && allowEmptySearch || keyword.length >= minChars) {\n        onSearch(keyword);\n      }\n    };\n\n    this.onChange = e => {\n      const {\n        isDynamic,\n        defaultValue\n      } = this.props;\n      const searchKeyword = e.target.value || defaultValue;\n      this.setState({\n        searchKeyword\n      });\n\n      if (isDynamic) {\n        this.onSearch(searchKeyword);\n      }\n    };\n\n    this.onSearchClick = () => {\n      this.onSearch(this.state.searchKeyword);\n    };\n\n    this.onKeyDown = e => {\n      if (e.keyCode && e.keyCode === 13) {\n        this.onSearch(this.state.searchKeyword);\n      }\n    };\n\n    this.getButton = () => {\n      const {\n        id,\n        allowEmptySearch,\n        isDynamic,\n        minChars\n      } = this.props;\n      const {\n        searchKeyword\n      } = this.state;\n      const bsClass = ['btn'];\n      let icon = React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      });\n      let onClick = this.onSearchClick;\n      let isDisabled = true;\n\n      if (searchKeyword.length === 0 && allowEmptySearch || searchKeyword.length >= minChars) {\n        isDisabled = false;\n      }\n\n      if (isDynamic) {\n        bsClass.push('dynamic-search');\n      }\n\n      if (searchKeyword && isDynamic) {\n        bsClass.push('btn-close');\n        icon = React.createElement(Button, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        });\n        onClick = this.onClearClick;\n        isDisabled = false;\n      }\n\n      return React.createElement(Button, {\n        id: `${id}-button`,\n        bsClass: bsClass.join(' '),\n        onClick: onClick,\n        disabled: isDisabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, icon);\n    };\n\n    this.getTooltip = tooltip => React.createElement(Tooltip, {\n      id: \"tooltip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, tooltip);\n\n    this.renderSearchBar = () => {\n      const {\n        autoFocus,\n        id,\n        inputClassName,\n        translations,\n        isDynamic\n      } = this.props;\n      const {\n        searchKeyword\n      } = this.state;\n      return React.createElement(InputGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        autoFocus: autoFocus,\n        id: `${id}-input`,\n        type: isDynamic ? 'text' : 'search',\n        className: inputClassName,\n        onChange: this.onChange,\n        onKeyDown: isDynamic ? () => {} : this.onKeyDown,\n        placeholder: translations.searchPlaceHolder,\n        value: searchKeyword,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), React.createElement(InputGroup.Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, this.getButton()));\n    };\n\n    this.renderContent = () => {\n      const {\n        translations,\n        tooltipDelay,\n        isDynamic,\n        isTooltipEnabled,\n        minChars\n      } = this.props;\n      let tooltipText = translations.tooltip;\n\n      if (!tooltipText) {\n        if (isDynamic) {\n          tooltipText = `Search starts when you have entered ${minChars} characters.`;\n        } else if (minChars) {\n          tooltipText = `You can search when you have entered ${minChars} characters.`;\n        }\n      }\n\n      if (tooltipText && isTooltipEnabled) {\n        return React.createElement(OverlayTrigger, {\n          placement: \"bottom\",\n          overlay: this.getTooltip(tooltipText),\n          delay: tooltipDelay,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        }, this.renderSearchBar());\n      }\n\n      return this.renderSearchBar();\n    };\n\n    this.state = {\n      searchKeyword: props.defaultValue\n    };\n  }\n\n  render() {\n    const {\n      id,\n      className\n    } = this.props;\n    return React.createElement(\"div\", {\n      id: `${id}-container`,\n      className: className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, this.renderContent());\n  }\n\n}\nSearch.propTypes = {\n  autoFocus: PropTypes.bool,\n  id: PropTypes.string,\n  className: PropTypes.string,\n  inputClassName: PropTypes.string,\n  defaultValue: PropTypes.string,\n  tooltipDelay: PropTypes.number,\n  minChars: PropTypes.number,\n  allowEmptySearch: PropTypes.bool,\n  isDynamic: PropTypes.bool,\n  isTooltipEnabled: PropTypes.bool,\n  onSearch: PropTypes.func,\n  onClear: PropTypes.func,\n  translations: PropTypes.shape({\n    tooltip: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    searchPlaceHolder: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n  })\n};\nSearch.defaultProps = {\n  autoFocus: false,\n  id: 'oc-react-searchbar',\n  className: 'oc-search-bar',\n  inputClassName: '',\n  defaultValue: '',\n  minChars: 0,\n  tooltipDelay: 0,\n  allowEmptySearch: true,\n  isDynamic: false,\n  isTooltipEnabled: false,\n  onSearch: () => {},\n  onClear: () => {},\n  translations: {\n    tooltip: '',\n    searchPlaceHolder: 'Search...'\n  }\n};","map":{"version":3,"sources":["D:/React-SearchApp/search-app/src/components/search/search.js"],"names":["React","PropTypes","Button","InputGroup","FormControl","OverlayTrigger","Tooltip","Search","Component","constructor","props","onClearClick","onClear","defaultValue","setState","searchKeyword","onSearch","keyword","allowEmptySearch","minChars","length","onChange","e","isDynamic","target","value","onSearchClick","state","onKeyDown","keyCode","getButton","id","bsClass","icon","onClick","isDisabled","push","join","getTooltip","tooltip","renderSearchBar","autoFocus","inputClassName","translations","searchPlaceHolder","renderContent","tooltipDelay","isTooltipEnabled","tooltipText","render","className","propTypes","bool","string","number","func","shape","oneOfType","node","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\r\n//import './search.style.scss';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Button,\r\n  InputGroup,\r\n  FormControl,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n} from 'react-bootstrap';\r\n//import FaSearch from 'react-icons/fa/search';\r\n//import FaClose from 'react-icons/fa/close';\r\n\r\n\r\n\r\nexport default class Search extends React.Component {\r\n  static propTypes = {\r\n    autoFocus: PropTypes.bool,\r\n    id: PropTypes.string,\r\n    className: PropTypes.string,\r\n    inputClassName: PropTypes.string,\r\n    defaultValue: PropTypes.string,\r\n    tooltipDelay: PropTypes.number,\r\n    minChars: PropTypes.number,\r\n    allowEmptySearch: PropTypes.bool,\r\n    isDynamic: PropTypes.bool,\r\n    isTooltipEnabled: PropTypes.bool,\r\n    onSearch: PropTypes.func,\r\n    onClear: PropTypes.func,\r\n    translations: PropTypes.shape({\r\n      tooltip: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\r\n      searchPlaceHolder: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\r\n    }),\r\n  };\r\n\r\n  static defaultProps = {\r\n    autoFocus: false,\r\n    id: 'oc-react-searchbar',\r\n    className: 'oc-search-bar',\r\n    inputClassName: '',\r\n    defaultValue: '',\r\n    minChars: 0,\r\n    tooltipDelay: 0,\r\n    allowEmptySearch: true,\r\n    isDynamic: false,\r\n    isTooltipEnabled: false,\r\n    onSearch: () => {},\r\n    onClear: () => {},\r\n    translations: {\r\n      tooltip: '',\r\n      searchPlaceHolder: 'Search...',\r\n    },\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchKeyword: props.defaultValue,\r\n    };\r\n  }\r\n\r\n  onClearClick = () => {\r\n    const {\r\n      onClear,\r\n      defaultValue,\r\n    } = this.props;\r\n    this.setState({ searchKeyword: defaultValue });\r\n    this.onSearch(defaultValue);\r\n    onClear();\r\n  }\r\n\r\n  // Search when allowed\r\n  onSearch = (keyword) => {\r\n    const {\r\n      onSearch,\r\n      allowEmptySearch,\r\n      minChars,\r\n    } = this.props;\r\n    if ((keyword.length === 0 && allowEmptySearch) || (keyword.length >= minChars)) {\r\n      onSearch(keyword);\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    const {\r\n      isDynamic,\r\n      defaultValue,\r\n    } = this.props;\r\n    const searchKeyword = (e.target.value || defaultValue);\r\n    this.setState({ searchKeyword });\r\n    if (isDynamic) {\r\n      this.onSearch(searchKeyword);\r\n    }\r\n  }\r\n\r\n  onSearchClick = () => {\r\n    this.onSearch(this.state.searchKeyword);\r\n  }\r\n\r\n  onKeyDown = (e) => {\r\n    if (e.keyCode && e.keyCode === 13) {\r\n      this.onSearch(this.state.searchKeyword);\r\n    }\r\n  }\r\n\r\n  getButton = () => {\r\n    const {\r\n      id,\r\n      allowEmptySearch,\r\n      isDynamic,\r\n      minChars,\r\n    } = this.props;\r\n    const {\r\n      searchKeyword,\r\n    } = this.state;\r\n    const bsClass = ['btn'];\r\n    let icon = <Button/>;\r\n    let onClick = this.onSearchClick;\r\n    let isDisabled = true;\r\n    if ((searchKeyword.length === 0 && allowEmptySearch) || (searchKeyword.length >= minChars)) {\r\n      isDisabled = false;\r\n    }\r\n    if (isDynamic) {\r\n      bsClass.push('dynamic-search');\r\n    }\r\n    if (searchKeyword && isDynamic) {\r\n      bsClass.push('btn-close');\r\n      icon = <Button/>;\r\n      onClick = this.onClearClick;\r\n      isDisabled = false;\r\n    }\r\n    return (\r\n      <Button\r\n        id={`${id}-button`}\r\n        bsClass={bsClass.join(' ')}\r\n        onClick={onClick}\r\n        disabled={isDisabled}\r\n      >\r\n        {icon}\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  getTooltip = tooltip => (\r\n    <Tooltip id=\"tooltip\">\r\n      {tooltip}\r\n    </Tooltip>\r\n  )\r\n\r\n  renderSearchBar = () => {\r\n    const {\r\n      autoFocus,\r\n      id,\r\n      inputClassName,\r\n      translations,\r\n      isDynamic,\r\n    } = this.props;\r\n    const {\r\n      searchKeyword,\r\n    } = this.state;\r\n    return (\r\n      <InputGroup>\r\n        <FormControl\r\n          autoFocus={autoFocus}\r\n          id={`${id}-input`}\r\n          type={isDynamic ? 'text' : 'search'}\r\n          className={inputClassName}\r\n          onChange={this.onChange}\r\n          onKeyDown={isDynamic ? () => {} : this.onKeyDown}\r\n          placeholder={translations.searchPlaceHolder}\r\n          value={searchKeyword}\r\n        />\r\n        <InputGroup.Button>\r\n          {this.getButton()}\r\n        </InputGroup.Button>\r\n      </InputGroup>\r\n    );\r\n  }\r\n\r\n  renderContent = () => {\r\n    const {\r\n      translations,\r\n      tooltipDelay,\r\n      isDynamic,\r\n      isTooltipEnabled,\r\n      minChars,\r\n    } = this.props;\r\n    let tooltipText = translations.tooltip;\r\n    if (!tooltipText) {\r\n      if (isDynamic) {\r\n        tooltipText = `Search starts when you have entered ${minChars} characters.`;\r\n      } else if (minChars) {\r\n        tooltipText = `You can search when you have entered ${minChars} characters.`;\r\n      }\r\n    }\r\n    if (tooltipText && isTooltipEnabled) {\r\n      return (\r\n        <OverlayTrigger\r\n          placement=\"bottom\"\r\n          overlay={this.getTooltip(tooltipText)}\r\n          delay={tooltipDelay}\r\n        >\r\n          {this.renderSearchBar()}\r\n        </OverlayTrigger>\r\n      );\r\n    }\r\n    return this.renderSearchBar();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      className,\r\n    } = this.props;\r\n    return (\r\n      <div\r\n        id={`${id}-container`}\r\n        className={className}\r\n      >\r\n        {this.renderContent()}\r\n      </div>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}